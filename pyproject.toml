[build-system]
requires = ["hatchling >=1.26.3,<2"]
build-backend = "hatchling.build"

[project]
name = "easynetwork"
description = "The easiest way to use sockets in Python"
authors = [
    {name = "FrankySnow9", email = "clairicia.rcj.francis@gmail.com"}
]
dependencies = [
    "sniffio>=1.3.1,<2",
]
requires-python = ">=3.11"
readme = "README.md"
license-files = ["LICENSE"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Framework :: AsyncIO",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: BSD",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Internet",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Networking",
    "Typing :: Typed"
]
dynamic = ["version"]
keywords = [
    "networking",
    "socket",
    "server",
    "client",
    "communication",
    "serialization",
    "async",
    "asynchronous",
]

[project.urls]
Documentation = "https://easynetwork.readthedocs.io/"
"Issue Tracker" = "https://github.com/francis-clairicia/EasyNetwork/issues"
"Release Notes" = "https://github.com/francis-clairicia/EasyNetwork/releases"
"Source Code" = "https://github.com/francis-clairicia/EasyNetwork"

[project.optional-dependencies]
cbor = [
    "cbor2>=5.5,<6",
]
msgpack = [
    "msgpack>=1.1.0,<2",
]
trio = [
    "trio>=0.26,<1",
    "outcome~=1.3",
]

[dependency-groups]
dev = [
    "bump2version>=1.0.1,<2",
    "hatch>=1.8,<2",
]
build = [
    "build>=1.0.3,<2",
]
pre-commit = [
    "pre-commit>=4.0,<5",
]
uvloop = [
    "uvloop<1,>=0.21.0; os_name=='posix'",
]
tox = [
    "tox<5,>=4.0.8",
    "tox-pdm~=0.7.2",
]
format = [
    "isort>=5.13.1,<6",
    "black>=22.6.0",
]
mypy = [
    "mypy~=1.13",
]
types-msgpack = [
    "msgpack-types>=0.5.0",
]
flake8 = [
    "flake8>=7.0,<8",
    "git+https://github.com/francis-clairicia/flake8-dunder-all.git@v0.1.0",
]
bandit = [
    "bandit>=1.7.5,<2",
]
test = [
    "pytest~=8.3",
    "pytest-xdist~=3.3",
    "pytest-mock~=3.10",
    "pytest-cov~=6.0",
    "pytest-asyncio~=0.25.0",
    "trove-classifiers>=2023.11.9",
    # "pytest-retry~=1.6",
    # Temporary use VCS to get the modifications added on main (c.f. https://github.com/str0zzapreti/pytest-retry/pull/39)
    "git+https://github.com/str0zzapreti/pytest-retry.git@bb465fff6f01f3f90a77229468f7e08a3bdbce20",
]
test-ssl = [
    "trustme~=1.0",
]
test-trio = [
    "pytest-trio~=0.8.0",
]
coverage = [
    "coverage~=7.0",
]
doc = [
    "sphinx>=8.1,<9",
    "sphinx-rtd-theme>=3.0,<4",
    "sphinx-tabs>=3.4.1,<4",
    "sphinx-toolbox>=3.5.0,<4",
    "enum-tools[sphinx]>=0.12.0,<1",
]
micro-benchmark = [
    "pytest~=8.3",
    "pytest-benchmark[histogram]~=5.0",
]
benchmark-servers = [
    "build~=1.0",
    "docker~=7.0",
    "plotly~=5.18",
]
benchmark-servers-deps = [
    {include-group = "uvloop"},
    "easynetwork[trio]",
    "asyncio-dgram==2.1.2",
]

############################ hatchling configuration ############################

[tool.hatch.build.targets.wheel]
packages = ["src/easynetwork"]

[tool.hatch.version]
source = "vcs"
fallback-version = "1.1.0"

[tool.hatch.version.raw-options]  # setuptools_scm options
version_scheme = "no-guess-dev"
local_scheme =  "no-local-version"

[tool.hatch.build.hooks.vcs]
dependencies = ["hatch-vcs~=0.4.0"]
version-file = "src/easynetwork/version.py"
template = '''
# Copyright 2021-2025, Francis Clairicia-Rose-Claire-Josephine
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
"""EasyNetwork version module.

File generated by setuptools_scm.
Don't change, don't track in version control.
"""

__all__ = ["__version__", "__version_tuple__"]

__version__ = {version!r}
__version_tuple__ = {version_tuple!r}
'''


############################ Development tools configuration ############################

[tool.isort]
profile = "black"
line_length = 130
combine_as_imports = true
sections = ["FUTURE", "STDLIB", "TRIO", "EASYNETWORK", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
known_easynetwork = ["easynetwork"]
known_trio = ["trio", "outcome"]
add_imports = ["from __future__ import annotations"]
extend_skip = [
    "docs/source/conf.py",
    "src/easynetwork/version.py",
]

[tool.black]
line-length = 130
target-version = ["py311"]

[tool.mypy]
python_version = "3.11"
show_error_codes = true
warn_unused_configs = true
disallow_any_generics = true
disallow_any_unimported = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
no_implicit_reexport = true
strict_equality = true
local_partial_types = true
enable_error_code = ["truthy-bool", "ignore-without-code", "unused-awaitable"]

[[tool.mypy.overrides]]
module = ["docker.*", "plotly.*", "pytest_benchmark.*", "pytest_trio.*"]
ignore_missing_imports = true

[tool.pytest.ini_options]
asyncio_mode = "strict"  # Avoid some unwanted behaviour
asyncio_default_fixture_loop_scope = "function"
addopts = "--dist=worksteal --strict-markers -p 'no:anyio' -p 'no:benchmark'"  # hatch CLI dependencies installs anyio
doctest_optionflags = "ELLIPSIS"
minversion = "7.1.2"
testpaths = ["tests"]
norecursedirs = ["scripts"]
markers = [
    "slow: marks tests as slow",
    "functional: marks tests as functional tests",
    "unit: marks tests as unit tests",
    "serializer: marks serializers tests",
]
filterwarnings = [
    "always::ResourceWarning:easynetwork",
]

[tool.coverage.run]
branch = true
source_pkgs = [
    "easynetwork",
]
relative_files = true
disable_warnings = [
    "module-not-measured",  # Happening when using pytest-xdist.
]

[tool.coverage.paths]
source = [
    "src/",
    # Leading '*/' is necessary because .tox folder could be in other directory than the current working directory.
    "*/.tox/*/lib/python*/site-packages",
    '*\.tox\*\Lib\site-packages',  # Keep single quote here (TOML raw string syntax, useful for '\')
]

[tool.coverage.report]
show_missing = true
precision = 2
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "(typing\\.)?assert_never",

    # Don't complain if non-runnable code isn't run:
    "if __name__ == .__main__.:",

    # Don't complain about type hinting code:
    "if (typing\\.)?TYPE_CHECKING:",
    "@(typing\\.)?overload",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]
partial_branches = [
    # Have to re-enable the standard pragma
    "pragma: no branch",

    # Don't complain about code in debug mode, they are always run in unit tests
    "if __debug__:",
]

[tool.coverage.html]
show_contexts = "${COVERAGE_SHOWCONTEXTS-false}"

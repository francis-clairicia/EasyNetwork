[build-system]
requires = ["hatchling >=1.13,<2"]
build-backend = "hatchling.build"

[project]
name = "easynetwork"
description = "The easiest way to use sockets in Python"
authors = [
    {name = "FrankySnow9", email = "clairicia.rcj.francis@gmail.com"}
]
dependencies = []
requires-python = ">=3.11"
readme = "README.md"
license-files = { paths = ["LICENSE"] }
classifiers = [
    "Development Status :: 4 - Beta",
    "Framework :: AsyncIO",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: BSD",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.11",
    "Topic :: Internet",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Networking",
    "Typing :: Typed"
]
dynamic = ["version"]
keywords = [
    "networking",
    "socket",
    "server",
    "client",
    "communication",
    "serialization",
    "async",
    "asynchronous",
]

[project.urls]
Documentation = "https://easynetwork.readthedocs.io/en/latest/"
"Issue Tracker" = "https://github.com/francis-clairicia/EasyNetwork/issues"
"Release Notes" = "https://github.com/francis-clairicia/EasyNetwork/releases"
"Source Code" = "https://github.com/francis-clairicia/EasyNetwork"

[project.optional-dependencies]
cbor = [
    "cbor2>=5.5,<6",
]
msgpack = [
    "msgpack>=1.0.7,<2",
]
encryption = [
    "cryptography>=39",
]
sniffio = [
    "sniffio>=1.3.0",
]

############################ pdm configuration ############################

[tool.pdm.dev-dependencies]
dev = [
    "pre-commit>=2.20.0",
    "bump2version>=1.0.1",
]
uvloop = [
    "uvloop~=0.17.0; sys_platform!='win32'",
]
tox = [
    "tox<5,>=4.0.8",
]
format = [
    "isort!=5.11.0,>=5.10.1",
    "black>=22.6.0",
]
mypy = [
    "mypy~=1.6.0",
    "types-cryptography>=3.3.23.2",
    "msgpack-types>=0.2.0",
]
flake8 = [
    "flake8>=6.0",
    "flake8-pyi>=22.11.0",
    "flake8-dunder-all @ git+https://github.com/francis-clairicia/flake8-dunder-all.git@v0.1.0",
]
bandit = [
    "bandit>=1.7.5",
]
test = [
    "pytest~=7.4,>=7.4.2",
    "pytest-xdist>=3.3.1",
    "pytest-mock~=3.10.0",
    "pytest-cov<5,>=4.0",
    "pytest-asyncio>=0.21.0",
    "trove-classifiers==2023.8.7",
    "trustme>=1.0.0",
]
doc = [
    "sphinx>=6.2.1,<7",
    "sphinx-rtd-theme>=1.2.2",
    "sphinx-tabs>=3.4.1",
    "sphinx-toolbox>=3.5.0",
    "enum-tools[sphinx]>=0.10.0",
]

############################ hatchling configuration ############################

[tool.hatch.build]
exclude = [
  ".github/",
  ".vscode/",
  ".bumpversion.cfg",
  ".readthedocs.yaml",
]

[tool.hatch.build.targets.wheel]
packages = ["src/easynetwork", "src/easynetwork_asyncio"]

[tool.hatch.version]
path = "src/easynetwork/__init__.py"


############################ Development tools configuration ############################

[tool.isort]
profile = "black"
line_length = 130
combine_as_imports = true
sections = ["FUTURE", "STDLIB", "EASYNETWORK", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
known_easynetwork = ["easynetwork", "easynetwork_asyncio"]
add_imports = ["from __future__ import annotations"]
extend_skip = [
    "docs/source/conf.py"
]

[tool.black]
line-length = 130
target-version = ["py311"]

[tool.mypy]
mypy_path = "$MYPY_CONFIG_FILE_DIR/src"
python_version = "3.11"
show_error_codes = true
warn_unused_configs = true
disallow_any_generics = true
disallow_any_unimported = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
no_implicit_reexport = true
strict_equality = true
enable_error_code = ["truthy-bool", "ignore-without-code", "unused-awaitable"]

[[tool.mypy.overrides]]
module = [
    "cbor2",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
asyncio_mode = "strict"  # Avoid some unwanted behaviour
addopts = "--strict-markers"
minversion = "7.1.2"
testpaths = ["tests"]
norecursedirs = ["scripts"]
markers = [
    "slow: marks tests as slow",
    "functional: marks tests as functional tests",
    "unit: marks tests as unit tests",
    "serializer: marks serializers tests",
]

[tool.coverage.run]
branch = true
source_pkgs = [
    "easynetwork",
    "easynetwork_asyncio",
]
relative_files = true
disable_warnings = [
    "module-not-measured",  # Happening when using pytest-xdist.
]

[tool.coverage.paths]
source = [
    "src/",
    ".tox/*/lib/python*/site-packages",
    '.tox\*\Lib\site-packages',  # Keep single quote here (TOML raw string syntax, useful for '\')
]

[tool.coverage.report]
show_missing = true
precision = 2
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "(typing\\.)?assert_never",

    # Don't complain if non-runnable code isn't run:
    "if __name__ == .__main__.:",

    # Don't complain about type hinting code:
    "if (typing\\.)?TYPE_CHECKING:",
    "@(typing\\.)?overload",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]

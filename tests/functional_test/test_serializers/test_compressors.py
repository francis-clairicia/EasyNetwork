# -*- coding: Utf-8 -*-

from __future__ import annotations

from abc import abstractmethod
from functools import cache
from typing import Any, final

from easynetwork.serializers.wrapper.compressor import BZ2CompressorSerializer, ZlibCompressorSerializer

import pytest

from .base import BaseTestIncrementalSerializer, NoSerialization


class BaseTestCompressorSerializer(BaseTestIncrementalSerializer):
    @classmethod
    @abstractmethod
    def compress_data(cls, data: bytes) -> bytes:
        raise NotImplementedError

    @classmethod
    @cache
    def get_oneshot_serialize_sample(cls) -> list[tuple[Any, bytes, str]]:
        import os

        return [
            (p, cls.compress_data(p), id)
            for p, id in [
                (b"", "empty bytes"),
                (b"a", "one ascii byte"),
                (b"\xcc", "one unicode byte"),
                (b"z" * 255, "255 unique byte"),
                (os.urandom(255), "255 urandom generated bytes"),
            ]
        ]

    @classmethod
    @cache
    def get_incremental_serialize_sample(cls) -> list[tuple[Any, bytes, str]]:
        return cls.get_oneshot_serialize_sample()

    @classmethod
    @cache
    def get_invalid_complete_data(cls) -> list[tuple[bytes, str]]:
        return [
            (s[:-1], id)  # Remove one byte at last will break the checksum
            for _, s, id in cls.get_oneshot_serialize_sample()
            if s
        ]


@final
class TestBZ2CompressorSerializer(BaseTestCompressorSerializer):
    @classmethod
    def compress_data(cls, data: bytes) -> bytes:
        import bz2

        return bz2.compress(data, compresslevel=9)

    @pytest.fixture(scope="class")
    @classmethod
    def serializer(cls) -> BZ2CompressorSerializer[bytes, bytes]:
        return BZ2CompressorSerializer(NoSerialization())


@final
class TestZlibCompressorSerializer(BaseTestCompressorSerializer):
    @classmethod
    def compress_data(cls, data: bytes) -> bytes:
        import zlib

        return zlib.compress(data, level=zlib.Z_BEST_COMPRESSION)

    @pytest.fixture(scope="class")
    @classmethod
    def serializer(cls) -> ZlibCompressorSerializer[bytes, bytes]:
        return ZlibCompressorSerializer(NoSerialization())

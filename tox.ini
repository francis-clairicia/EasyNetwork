[tox]
minversion = 4.0
envlist = py310-nocov, mypy-{lite,full,test}, pre-commit
skip_missing_interpreters = true

[base]
setenv =
    PYTHONHASHSEED = 100
    PYTHONUNBUFFERED = 1

[base_testenv]
extras = full
deps =
    -r requirements-test.txt

[testenv:py310-{nocov,cov}]
package = sdist
use_develop =
    nocov: false
    cov: true
extras =
    {[base_testenv]extras}
deps =
    {[base_testenv]deps}
setenv =
    {[base]setenv}
commands =
    nocov: pytest -p 'no:cacheprovider' {tty:--color=yes} {posargs:--timeout=300 --no-cov}
    cov: pytest -p 'no:cacheprovider' {tty:--color=yes} {posargs:-m 'functional or unit' --timeout=300 --cov --cov-append}

[testenv:check-build-sdist]  # 'flit build' and 'python -m build' should generate the same tar
recreate = true
skip_install = true
deps =
    flit >=3.7.1,<4
    build
allowlist_externals =
    bash
    diff
    find
    mv
    rm
setenv =
    {[base]setenv}
    SOURCE_DATE_EPOCH = 1577833200  # 01/01/2020
commands_pre =
    -mv dist {envtmpdir}{/}dist.bak
commands =
    python -m build --sdist --outdir {envtmpdir}{/}isolated-build-dist
    flit build --format sdist
    bash -ec 'diff $(find {envtmpdir}{/}isolated-build-dist -type f -name "*.tar.gz") $(find dist -type f -name "*.tar.gz")'
commands_post =
    rm -rf dist
    -mv {envtmpdir}{/}dist.bak dist

[testenv:build]
skip_install = true
deps =
    build
    twine
allowlist_externals =
    cp
    rm
setenv =
    {[base]setenv}
passenv =
    SOURCE_DATE_EPOCH
commands =
    python -m build --outdir {envtmpdir}{/}dist
    twine check --strict {envtmpdir}{/}dist{/}*
    cp -a {envtmpdir}{/}dist{/}. {toxinidir}{/}dist
    rm -rf {envtmpdir}{/}dist

[testenv:mypy-{lite,full,test}]
package = wheel
extras =
    lite:
    full: full
    test: {[base_testenv]extras}
deps =
    test: {[base_testenv]deps}
    -c requirements-dev.txt
    mypy
allowlist_externals =
    rm
setenv =
    {[base]setenv}
    MYPY_CACHE_DIR = {envdir}{/}.mypy_cache
commands =
    lite,full: mypy --no-incremental --config-file {toxinidir}{/}pyproject.toml -p easynetwork
    test: mypy --no-incremental --config-file {toxinidir}{/}pyproject.toml {toxinidir}{/}tests
commands_post =
    rm -rf {env:MYPY_CACHE_DIR}

[testenv:pre-commit]
skip_install = true
deps =
    -c requirements-dev.txt
    pre-commit
setenv =
    {[base]setenv}
    SKIP=mypy
passenv =
    PRE_COMMIT_HOME
    XDG_CACHE_HOME
commands =
    pre-commit run {posargs:--all-files}

[tox]
minversion = 4.0
envlist =
    # Lint & Format
    pre-commit
    mypy-{full,test,docs}
    # Build
    build
    # Tests (3.11)
    py311-other-{tests,docstrings}
    py311-{unit,functional}-{__standard__,cbor,msgpack,encryption}
    py311-functional-{sniffio,asyncio_proactor,uvloop}
    # Tests (3.12)
    py312-{unit,functional}-{__standard__,cbor,msgpack,encryption}
    py312-functional-{sniffio,asyncio_proactor,uvloop}
    # Report
    coverage
skip_missing_interpreters = true

[base]
setenv =
    PYTHONHASHSEED = 100
    PYTHONUNBUFFERED = 1
    PDM_IGNORE_SAVED_PYTHON = 1
    PDM_CHECK_UPDATE = False

[docs]
root_dir = {toxinidir}{/}docs
source_dir = {[docs]root_dir}{/}source
examples_dir = {[docs]source_dir}{/}_include{/}examples

[base-pytest]
setenv =
    PYTHONASYNCIODEBUG = 1
addopts = -p "no:cacheprovider" {tty:--color=yes}
unit_tests_rootdir = tests{/}unit_test
functional_tests_rootdir = tests{/}functional_test
xdist_dist = worksteal

[testenv:py311-other-{tests,docstrings}]
package = wheel
groups =
    test
setenv =
    {[base]setenv}
    {[base-pytest]setenv}
    PYTEST_ADDOPTS = {[base-pytest]addopts} --no-cov
commands =
    tests: pytest -m "not unit and not functional" {posargs}
    docstrings: pytest --doctest-modules {posargs} {toxinidir}{/}src
    docstrings: pytest --doctest-modules {posargs} {[docs]examples_dir}{/}tutorials{/}ftp_server
    docstrings: pytest --doctest-glob="*.rst" {posargs} {[docs]source_dir}

[testenv:{py311,py312}-{unit,functional}-{__standard__,cbor,msgpack,encryption}]
package = wheel
groups =
    test
    cbor: cbor
    msgpack: msgpack
    encryption: encryption
setenv =
    {[base]setenv}
    {[base-pytest]setenv}
    PYTEST_ADDOPTS = {[base-pytest]addopts} --cov --cov-report=''
    COVERAGE_FILE = .coverage.{envname}
    unit: TESTS_ROOTDIR = {[base-pytest]unit_tests_rootdir}
    functional: TESTS_ROOTDIR = {[base-pytest]functional_tests_rootdir}
passenv =
    PYTEST_MAX_WORKERS
commands =
    __standard__: pytest -n "{env:PYTEST_MAX_WORKERS:auto}" --dist={[base-pytest]xdist_dist} -m "not feature" {posargs} {env:TESTS_ROOTDIR}
    cbor: pytest -m "feature_cbor" {posargs} {env:TESTS_ROOTDIR}
    msgpack: pytest -m "feature_msgpack" {posargs} {env:TESTS_ROOTDIR}
    encryption: pytest -m "feature_encryption" {posargs} {env:TESTS_ROOTDIR}

[testenv:{py311,py312}-functional-sniffio]
package = wheel
groups =
    test
    sniffio
setenv =
    {[base]setenv}
    {[base-pytest]setenv}
    PYTEST_ADDOPTS = {[base-pytest]addopts} --cov --cov-report=''
    COVERAGE_FILE = .coverage.{envname}
    TESTS_ROOTDIR = {[base-pytest]functional_tests_rootdir}
commands =
    pytest -m "feature_sniffio" {posargs} {env:TESTS_ROOTDIR}

[testenv:{py311,py312}-functional-{asyncio_proactor,uvloop}]
package = wheel
platform =
    asyncio_proactor: win32
    uvloop: linux|darwin
groups =
    test
    uvloop: uvloop
setenv =
    {[base]setenv}
    {[base-pytest]setenv}
    PYTEST_ADDOPTS = {[base-pytest]addopts} --cov --cov-report=''
    COVERAGE_FILE = .coverage.{envname}
    TESTS_ROOTDIR = {[base-pytest]functional_tests_rootdir}
    asyncio_proactor: ASYNCIO_EVENTLOOP = asyncio-proactor
    uvloop: ASYNCIO_EVENTLOOP = uvloop
passenv =
    PYTEST_MAX_WORKERS
commands =
    pytest -n "{env:PYTEST_MAX_WORKERS:auto}" --dist={[base-pytest]xdist_dist} --asyncio-event-loop="{env:ASYNCIO_EVENTLOOP}" -m "asyncio and not feature" {posargs} {env:TESTS_ROOTDIR}

[testenv:coverage]
skip_install = True
depends =
    {py311,py312}-{unit,functional}-{__standard__,cbor,msgpack,encryption}
    {py311,py312}-functional-{sniffio,asyncio_proactor,uvloop}
parallel_show_output = True
groups =
    coverage
setenv =
    {[base]setenv}
    COVERAGE_FILE = .coverage
commands_pre =
    coverage erase
commands =
    coverage combine
    coverage report

[testenv:build]
skip_install = true
groups =
    build
allowlist_externals =
    cp
    rm
setenv =
    {[base]setenv}
passenv =
    SOURCE_DATE_EPOCH
commands =
    python -m build --outdir {envtmpdir}{/}dist
    twine check --strict {envtmpdir}{/}dist{/}*
    cp -a {envtmpdir}{/}dist{/}. {toxinidir}{/}dist
    rm -rf {envtmpdir}{/}dist

[testenv:mypy-{full,test,docs}]
package = wheel
groups =
    mypy
    test: test
    full,test: cbor
    full,test: msgpack
    full,test: types-msgpack
    full,test: encryption
    full,test: types-encryption
    full,test: sniffio
setenv =
    {[base]setenv}
    MYPY_CACHE_DIR = {envtmpdir}{/}.mypy_cache
    MYPY_OPTS = --config-file {toxinidir}{/}pyproject.toml
commands =
    # package
    full: mypy {env:MYPY_OPTS} -p easynetwork
    # tests
    test: mypy {env:MYPY_OPTS} {toxinidir}{/}tests
    # documentation
    docs: mypy {env:MYPY_OPTS} {[docs]examples_dir}{/}tutorials{/}echo_client_server_tcp
    docs: mypy {env:MYPY_OPTS} {[docs]examples_dir}{/}tutorials{/}echo_client_server_udp
    docs: mypy {env:MYPY_OPTS} {[docs]examples_dir}{/}tutorials{/}ftp_server
    docs: mypy {env:MYPY_OPTS} {[docs]examples_dir}{/}howto{/}protocols
    docs: mypy {env:MYPY_OPTS} {[docs]examples_dir}{/}howto{/}serializers
    docs: mypy {env:MYPY_OPTS} {[docs]examples_dir}{/}howto{/}tcp_clients
    docs: mypy {env:MYPY_OPTS} {[docs]examples_dir}{/}howto{/}tcp_servers
    docs: mypy {env:MYPY_OPTS} {[docs]examples_dir}{/}howto{/}udp_clients
    docs: mypy {env:MYPY_OPTS} {[docs]examples_dir}{/}howto{/}udp_servers

[testenv:pre-commit]
skip_install = true
groups =
    pre-commit
setenv =
    {[base]setenv}
    SKIP=mypy
passenv =
    PRE_COMMIT_HOME
    XDG_CACHE_HOME
commands =
    pre-commit run {posargs:--all-files}
